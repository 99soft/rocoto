                                    ------
                                    Home
                                    ------
                                    Configuration
                                    ------
                                     2010

~~
~~   Copyright 2009-2010 The Rocoto Team
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

~~author: Simone Tripodi
~~version: $Id$

The Converters module

  The <Converters> module adds some string-to-type converters not already present
  in Google Guice, plus a simple to use module that makes easier the converters
  registration.

  Users that want ot use the <Converters> module in their projects,
  users have to add in their <<<pom.xml>>> the following <<<dependency>>>:

----------------------------------------
<dependencies>
    ...
    <dependency>
        <groupId>com.google.code.rocoto</groupId>
        <artifactId>rocoto-converters</artifactId>
        <version>XX.XX</version>
    </dependency>
    ...
</dependencies>
----------------------------------------

* The ConvertersModule

  Thecore class is the <<<com.google.code.rocoto.converters.ConvertersModule>>>
  that's a Guice Module that simplifyes the <<<com.google.inject.spi.TypeConverter>>>
  registration.

  Users can write their <<<com.google.inject.spi.TypeConverter>>> implementation:

----------------------------------------
import com.google.inject.TypeLiteral;
import com.google.inject.spi.TypeConverter;

public class MyConverter implements TypeConverter {

    public Object convert(String value, TypeLiteral<?> toType) {
       // perform here the coonversion
    }

}
----------------------------------------

  then registry it into the module by specifying the binding type:

----------------------------------------
import com.google.code.rocoto.converters.ConvertersModule;
...
ConvertersModule convertersModule = new ConvertersModule();
convertersModule.registerConverter(MyType.class, new MyConverter());
----------------------------------------

  or bind it to a <<<com.google.inject.TypeLiteral>>>:

----------------------------------------
convertersModule.registerConverter(new TypeLiteral<List<MyType>>(){}, new MyConverter());
----------------------------------------

* The Converters
