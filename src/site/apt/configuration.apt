                                    ------
                                    Home
                                    ------
                                    Simple Configuration
                                    ------
                                     2010

~~
~~   Copyright 2009-2010 The Rocoto Team
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

~~author: Simone Tripodi
~~version: $Id$

The Configuration module

  The <Configuration> module is a dependencies-less, light yet powerful <Guice> module to easy load
  configuration properties and bing them to the <Guice Binder>.

  The first concept users have to get familiar is the <ConfigurationReader>, an object able to
  read a generic configuration file in any format, that iterates over the key/value
  configuration entries.

  

  Users are now ready to load configuration files, but first have to create the module;
  once plugged the <ConfigurationReader>s, is it possible to create the Guice Injector:

+--------------------------------------+
import com.google.inject.Guice;
import com.google.inject.Injector;

import com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule;

...

SimpleConfigurationModule configurationModule = new SimpleConfigurationModule();
/*
 * adds your configuration files
 */
Injector injector = Guice.createInjector(configurationModule,
    ...
);
+--------------------------------------+

  Finally, users can access to configuration parameters throug the
  <<<@com.google.inject.name.Named>>> annotation.

* Adding properties files from Classpath

  In many cases developers are used to include their properties file into wars
  or jars, then reloading them from the classpath.

  The <<<com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule>>> offers a set of
  methods that simplifies that loading operation, by specifying the full
  qualified classpath resource name:

+--------------------------------------+
module.addProperties("com/acme/jdbc.properties");
module.addProperties("/com/acme/ldap.properties");
+--------------------------------------+

  If needed, users can also specify the <<<ClassLoader>>> needed to load the
  pointed resource(s):

+--------------------------------------+
ClassLoader myClassLoader = [...];
...
module.addProperties("com/acme/jdbc.properties", myClassLoader);
module.addProperties("/com/acme/ldap.properties", myClassLoader);
+--------------------------------------+

  The <<<com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule>>> also supports the
  <XML> definition of properties file:

+--------------------------------------+
module.addXMLProperties("com/acme/jdbc.xml");
module.addXMLProperties("/com/acme/ldap.xml");
+--------------------------------------+

  and, of course, also for <XML> it is possible to specify the <<<ClassLoader>>>:

+--------------------------------------+
ClassLoader myClassLoader = [...];
...
module.addXMLProperties("com/acme/jdbc.xml", myClassLoader);
module.addXMLProperties("/com/acme/ldap.xml", myClassLoader);
+--------------------------------------+

* Adding Properties files from the FileSystem

  The <<<com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule>>> is able to load
  typical and <XML> properties files from the filesystem by specifying the
  <<<java.io.File>>> location:

+--------------------------------------+
import java.io.File;
...
module.addProperties(new File("etc/com/acme/jdbc.properties"));
module.addProperties(new File("etc/com/acme/ldap.xml"));
+--------------------------------------+

  By default, using this API, files wich name matches with <<<**/*.properties>>>
  pattern will be threated as typical properties files, <<<**/*.xml>>> instead as
  <XML> properties definition.

  If the specified <<<java.io.File>>> is a directory, it will be traversed
  looking for <<<**/*.properties>>> and <<<**/*.xml>>> properties files and will
  be loaded in the configuration; given the following directory:

+--------------------------------------+
etc
|-- com
|   |-- jdbc.properties
|   |-- rocoto
|   |   |-- should-be-ignored.txt
|   |   `-- simpleconfig
|   |       |-- memcached.xml
|   |       `-- should-be-ignored.txt
|   `-- should-be-ignored.txt
|-- ibatis.properties
`-- should-be-ignored.txt
+--------------------------------------+

  all txt files will be ignored, all others will be load as properties files.

  Users can customize the default behavior of properties files pattern matching,
  by specifying their <<<com.googlecode.rocoto.simpleconfig.AbstractPropertiesFileFilter>>>
  implementation, where it is possible specifying the files patterns:

+--------------------------------------+
import com.googlecode.rocoto.simpleconfig.AbstractPropertiesFileFilter;

...
module.addProperties(new File("etc"), new AbstractPropertiesFileFilter(
    "**/*.config", // specify here the 'old-style' properties file pattern
    "**/*.p?ml" // specify here the XML properties file pattern
) {});
+--------------------------------------+

  As described earlier, patterns are used for the inclusion and exclusion of
  files. These patterns look very much like the patterns used in
  {{{http://ant.apache.org/manual/dirtasks.html#patterns}Apache Ant}} (from
  wich the code has been kindly borrowed :P):

  * <<<**>>> matches zero or more 'directories' in a path;
  * <<<*>>> matches zero or more characters;
  * <<<?>>> matches one character.

* Adding Properties files from URLs

  The <<<com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule>>> also supports the
  properties loading from URLs, by specifying the <<<java.net.URL>>>:

+--------------------------------------+
import java.net.URL;
...
module.addProperties(new URL("http://acme.com/config/jdbc.properties"));
module.addXMLProperties(new URL("http://acme.com/config/ldap.xml"));
+--------------------------------------+

* Adding Java System Properties

  In many cases users need to access to Java System Properties by invoking
  <<<System.getProperty("java.version")>>> or <<<System.getProperties()>>>.

  By enabling them to the configuration module, users can replace the Java System
  Properties retrieving operation with the Dependency Injection:

+--------------------------------------+
...
module.addSystemProperties();
+--------------------------------------+

  Java System Properties  can be referenced as:

+--------------------------------------+
user.os=${os.name} ${os.version} (${os.arch})
+--------------------------------------+

* Adding Environment Variables

  In Java5 the Environment Variables are accessible through <<<System.getenv()>>>
  and <<<System.getenv("JAVA_HOME")>>>; like for Java System Properties, users
  can adding Environment Variables simply by invoking:

+--------------------------------------+
...
module.addEnvironmentVariables();
+--------------------------------------+

  By default Environment Variables will be referenced into the configuration
  with the <<<env.>>> prefix, so in the <<<*.properties>>> files they can be
  referenced as:

+--------------------------------------+
user.home=${env.HOME}
+--------------------------------------+

* $\{\}, the <Apache Ant> variables style

  The <<<com.googlecode.rocoto.simpleconfig.SimpleConfigurationModule>>> supports the well
  known <$\{\}> expression to define placeholders, which scope is the whole
  configuration, that means that users can define some commons properties in one
  properties file:

+--------------------------------------+
commons.host=localhost
commons.port=8080
...
+--------------------------------------+

  then referencing them in different files:

+--------------------------------------+
ldap.host=${commons.host}
ldap.port=${commons.port}
...
+--------------------------------------+

  it works also in the XML format:

+--------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties version="1.0">
    <entry key="proxy.host">${commons.host}</entry>
    <entry key="proxy.port">${commons.port}</entry>
    ...
</properties>
+--------------------------------------+

** Default Values

  In Java code users can retrieve a property from <<<java.util.Properties>>> specifying the <<default>> value if the
  input key is not present, using the
  {{{http://download.oracle.com/javase/6/docs/api/java/util/Properties.html#getProperty(java.lang.String, java.lang.String)}Properties#getProperty(java.lang.String, java.lang.String)}}
  method.

  Rocoto allows doing the same, users can specify a key using the pipe character <<<|>>> to separate the key name from
  the default value:

+--------------------------------------+
JDBC.url=jdbc:derby://${JDBC.host|localhost}:${JDBC.port|1527}/${JDBC.schema}
+--------------------------------------+

  that means if <<<JDBC.host>>> and <<<JDBC.port>>> won't be specified, they will be replaced by the default values;
  given the following properties:

+--------------------------------------+
JDBC.url=jdbc:derby://${JDBC.host|localhost}:${JDBC.port|1527}/${JDBC.schema}
JDBC.schema=rocoto
+--------------------------------------+

  the <<<JDBC.url>>> property value will be <<<jdbc:derby://localhost:1527/rocoto>>>.

** com.google.inject.name.Names compatibility

  Users can still load properties using the Google Guice {{{http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/name/Names.html}Names}}
  but take care that loading properties using this method <$\{\}> expressions won't be resolved at all.
  On the other side, specified properties in that way will be used to resolve
  <$\{\}> expressions in properties using the <<<SimpleConfigurationModule>>>.

* Chaining methods

  In order to make simpler the <<<SimpleConfigurationModule>>> creation,
  since version 3.1 users can chain <<<SimpleConfigurationModule>>> methods:

+--------------------------------------+
Injector injector = Guice.createInjector(new SimpleConfigurationModule()
    .addProperties("/com/acme/ldap.properties")
    .addProperties(new File("etc/com/acme/jdbc.properties"))
    .addXMLProperties(new URL("http://acme.com/config/ldap.xml"))
    .addSystemProperties()
    .addEnvironmentVariables(),
    ...
);
+--------------------------------------+

* More flexible than the Spring Framework!

  I had a not so good experience with the Spring's {{{http://static.springsource.org/spring/docs/2.0.2/api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html}PropertyPlaceholderConfigurer}}
  because it forces users to centralize the properties files loading; I mean,
  to make things working, in the way that <$\{\}> expressions were correctly
  resolved, I had to declare just one <<<PropertyPlaceholderConfigurer>>> for the whole
  context, list all the <<<*.properties>>> files for the all modules.

  I didn't like that approach at all, it doesn't allow users to split configurations
  in different modules even if some keys are shared by two or more modules.
  With <<<rocoto-simple-configuration>>> users won't have these problems at all,
  they can load <<<*.properties>>> files from different locations and obtain the same result.
