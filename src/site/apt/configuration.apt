~~
~~   Copyright 2009-2010 The Rocoto Team
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

~~author: Simone Tripodi
~~version: $Id: simple-configuration.apt 71 2010-01-02 16:28:21Z simone.tripodi $
                                    ------
                                    Home
                                    ------
                                    Configuration
                                    ------
                                     2010

The Configuration module

  The <Configuration> module is an easy-to-use Apache
  {{{http://commons.apache.org/configuration/}commons-configurations}} wrapper,
  built for users that require binding more complex configuration format.

  Users that want ot use the <Configuration> module in their projects,
  users have to add in their <<<pom.xml>>> the following <<<dependency>>>:

----------------------------------------
<dependencies>
    ...
    <dependency>
        <groupId>com.rocoto</groupId>
        <artifactId>rocoto-configuration</artifactId>
        <version>XX.XX</version>
    </dependency>
    ...
</dependencies>
----------------------------------------

  Then users are ready to load configuration files, but first create the module;
  once configured, is it possible to create your injector:

----------------------------------------
import com.google.inject.Guice;
import com.google.inject.Injector;

import com.rocoto.configuration.ConfigurationModule;

...

ConfigurationModule configurationModule = new ConfigurationModule();
/*
 * adds your configuration files
 */
Injector injector = Guice.createInjector(configurationModule,
    ...
);
----------------------------------------

  Finally, users can access to configuration parameters throug the
  <<<@com.google.inject.name.Named>>> annotation.

* Adding configuration

  Users can easily add existing <<<org.apache.commons.configuration.Configuration>>>
  by invoking the method:

----------------------------------------
import org.apache.commons.configuration.Configuration;
...
Configuration conf = [...]
...
module.addConfiguration(conf);
----------------------------------------

  For example, users can add Java System Properties configuration:

----------------------------------------
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.SystemConfiguration;
...
module.addConfiguration(new SystemConfiguration());
----------------------------------------

  or the provided <<<com.rocoto.configuration.EnvironmentConfiguration>>> that
  loads the Environment Variables:

----------------------------------------
import org.apache.commons.configuration.Configuration;
import com.rocoto.configuration.EnvironmentConfiguration;
...
module.addConfiguration(new EnvironmentConfiguration());
----------------------------------------

  In this case, Environment Variables will be prefixed with <<<env.>>>, but users
  are free to customize it:

----------------------------------------
import org.apache.commons.configuration.Configuration;
import com.rocoto.configuration.EnvironmentConfiguration;
...
module.addConfiguration(new EnvironmentConfiguration("environment"));
----------------------------------------

* Adding File based Configurations

  Configurations based on textual files are widely supported by <Apache commons-configuration>
  by the {{{http://commons.apache.org/configuration/apidocs/org/apache/commons/configuration/FileConfiguration.html}org.apache.commons.configuration.FileConfiguration}}
  interface; the <<<com.rocoto.configuration.ConfigurationModule>>> allows
  loading them by specifying the type, usually a class that implements the
  <<<org.apache.commons.configuration.FileConfiguration>>> interface, the source
  and the charset encoding, <UTF-8> by default.

** From a Classpath resource

  By specifying the full qualified classpath resource name:

----------------------------------------
Class<? extends FileConfiguration> configurationType = [...]
module.loadConfiguration(configurationType, "com/acme/config.ext");
----------------------------------------

  If needed, users can also specify the <<<ClassLoader>>> needed to load the
  pointed resource(s):

----------------------------------------
ClassLoader myClassLoader = [...];
...
Class<? extends FileConfiguration> configurationType = [...]
module.loadConfiguration(configurationType, "com/acme/config.ext", myClassLoader);
----------------------------------------

** From a File

----------------------------------------
Class<? extends FileConfiguration> configurationType = [...]
module.loadConfiguration(configurationType, new java.io.File("etc/com/acme/config.ext"));
----------------------------------------

** From an URL

----------------------------------------
Class<? extends FileConfiguration> configurationType = [...]
module.loadConfiguration(configurationType, new java.net.URL("http://acme.com/config/config.ext"));
----------------------------------------

* Specifying the encoding

  All methods shown above load the specified resources using <UTF-8> encoding,
  but users are free to changed it if needed through the
  <<<java.nio.charset.Charset>>>:

----------------------------------------
import java.nio.charset.Charset;
...
Class<? extends FileConfiguration> configurationType = [...]
module.loadConfiguration(configurationType, "com/acme/config.ext", Charset.forName("UTF-16"));
----------------------------------------
